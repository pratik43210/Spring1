<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- default scope is singleton and by default
	object is created only once and only a new reference is
	created when we do context.getBean(id)-->
	<!--Singleton object is created by default -->
<!-- we can also autowire byType if there was only one bean of type computer
	 it will also work if we set primary="true" for either Laptop
	 or Destop bean
-->
	<bean id="alien" class="com.pratik.demo.Alien" scope="prototype" autowire="byName">
<!--	<bean id="alien" class="com.pratik.demo.Alien" scope="prototype" autowire="byType">-->
		<!--Setter injection-->
		<property name="age" value="21"></property>
<!--		<property name="lap" ref="laptop"/>-->
<!--	if we explicitly mention property it will prefer
		our property instead of autowire, even when we set primary bean
		-->
<!--		<property name="com" ref="com1"/>-->

<!--	INNER BEAN		-->
<!-- 	This bean can now only be accessed by Alien class-->
		<property name="com">
			<bean id="com" class="com.pratik.demo.Laptop"></bean>
		</property>
		
		<!--Constructor Injection-->
<!--		<constructor-arg value="21"/>-->
<!--		<constructor-arg ref="laptop"/>-->
<!--		<constructor-arg type="int" value="21"/>-->
<!--		<constructor-arg type="com.pratik.demo.Laptop" ref="laptop"/>-->
		<!--Using index for multiple arguments
		this will be useful wheere multiple args are same type-->
		<!--We must follow the sequence or args for name-->
<!--		<constructor-arg name="age" value="21"/>-->
<!--		<constructor-arg name="lap" ref="laptop"/>-->
<!--		indexing is the best way for constructior injection-->
<!--			<constructor-arg index="0" value="21"/>-->
<!--			<constructor-arg index="1" ref="laptop"/>-->
		<!-- when property is object, we use ref-->
		
	</bean>
	
<!--	<bean id="com" class="com.pratik.demo.Laptop">-->
<!--		<bean id="com1" class="com.pratik.demo.Laptop" primary="true">-->
<!--	</bean>-->
	<!-- object will not created by default and will only be created when
	we use it-->
<!--	<bean id="com1" class="com.pratik.demo.Desktop" scope="prototype" lazy-init="true"></bean>-->
	<bean id="com1" class="com.pratik.demo.Desktop" lazy-init="true"></bean>
</beans>